var fs = require('fs');
var _ = require('lodash');
var path = require('path');
var Promise = require('bluebird');
var db = require(path.normalize(__dirname + '/../../db'));
var plugins = require(path.normalize(__dirname + '/../../plugins'));

var predefinedPlugins = require(path.normalize(__dirname + '/../../plugin-conf'));
var hookCache = {
  'boards-before': [],
  'boards-after': [],
  'board-actions': [],
  'thread-actions': [],
  'post-profile': [],
  'post-actions': [],
  'post-body-after': [],
  'profile-details': [],
  'profile-display': []
};
var hookCacheKeys = _.keys(hookCache);
var outputText = '// DO NOT EDIT THIS FILE\n';
outputText += '// IT IS A GENERATED FILE\n\n';

module.exports = function() {
  // install predefined plugins
  return Promise.each(predefinedPlugins, function(pluginName) {
    return db.plugins.exists(pluginName)
    .then(function(exists) {
      if (!exists) {
        console.log('INSTALLING ' + pluginName);
        return plugins.install(pluginName); }
    });
  })
  // get all registered plugins
  .then(db.plugins.all)
  // aggregate template hooks and template dirs
  .each(function(dbPlugin) {
    var plugin = require(dbPlugin.name);
    var hooks = plugin.templateHooks;

    // template dir for this plugin
    outputText += 'require(\'' + dbPlugin.name + '/templates\');\n';

    // directive hook points for this plugin
    hookCacheKeys.forEach(function(key) {
      if (hooks[key] && hooks[key].length > 0) {
        hookCache[key] = hookCache[key].concat(hooks[key]);
      }
    });
  })
  // append directive hook points to output
  .then(function() {
    outputText += '\n';
    outputText += 'angular.module(\'ept\')\n';
    outputText += '.constant(\'templateHooks\', ';
    outputText += JSON.stringify(hookCache);
    outputText += ');\n';
  })
  // rebuild app/plugins file
  .then(function() {
    return new Promise(function(resolve, reject) {
      var filePath = path.normalize(__dirname + '/../../app/plugins.js');
      fs.writeFile(filePath, outputText, 'utf8', function(err){
        if (err) { return reject(err); }
        else {
          console.log('Generated plugin file.');
          return resolve();
        }
      });
    });
  });
};
